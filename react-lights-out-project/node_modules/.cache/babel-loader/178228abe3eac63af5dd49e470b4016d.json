{"ast":null,"code":"import _slicedToArray from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: Array.from({\n        length: props.lightBoard * props.lightBoard\n      })\n    };\n    _this.generateBoard = _this.generateBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  _createClass(Board, [{\n    key: \"generateBoard\",\n    value: function generateBoard() {\n      var copy = [];\n      this.state.board.map(function (n) {\n        var val = Math.floor(Math.random() * 2);\n        val === 0 ? copy.push(true) : copy.push(false);\n      });\n      this.setState({\n        board: copy\n      });\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lightBoardSize = this.props.lightBoard;\n      var tr_size = lightBoardSize * 100 + lightBoardSize * 2;\n      var tr_style = {\n        width: tr_size\n      }; // if the game is won, just show a winning msg & render nothing else\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        style: tr_style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }))); // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  lightBoard: 5\n};\nexport default Board;","map":{"version":3,"sources":["E:/Mateus - PROJECTS AND IDEAS/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","Array","from","length","lightBoard","generateBoard","bind","copy","map","n","val","Math","floor","random","push","setState","coord","ncols","nrows","split","Number","y","x","flipCell","lightBoardSize","tr_size","tr_style","width","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAMJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAAE,+EAAMA,KAAN;AAEnB,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEC,KAAK,CAACC,IAAN,CAAW;AAACC,QAAAA,MAAM,EAAEL,KAAK,CAACM,UAAN,GAAoBN,KAAK,CAACM;AAAnC,OAAX;AADI,KAAb;AAIA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBC,IAAnB,uDAArB;AANiB;AAQlB;AAED;;;;;oCACe;AACb,UAAIC,IAAI,GAAG,EAAX;AACA,WAAKR,KAAL,CAAWC,KAAX,CAAiBQ,GAAjB,CAAqB,UAAAC,CAAC,EAAI;AACxB,YAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAV;AACAH,QAAAA,GAAG,KAAK,CAAR,GAAYH,IAAI,CAACO,IAAL,CAAU,IAAV,CAAZ,GAA8BP,IAAI,CAACO,IAAL,CAAU,KAAV,CAA9B;AACD,OAHD;AAIA,WAAKC,QAAL,CAAc;AACZf,QAAAA,KAAK,EAAEO;AADK,OAAd;AAGD;;;oCAEeS,K,EAAO;AAAA,wBACA,KAAKlB,KADL;AAAA,UAChBmB,KADgB,eAChBA,KADgB;AAAA,UACTC,KADS,eACTA,KADS;AAErB,UAAIlB,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAFqB,6BAGRgB,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBX,GAAjB,CAAqBY,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGL,KAAd,IAAuBI,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGH,KAAzC,EAAgD;AAC9ClB,UAAAA,KAAK,CAACqB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACtB,KAAK,CAACqB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;;6BAES;AACP,UAAIE,cAAc,GAAG,KAAK1B,KAAL,CAAWM,UAAhC;AACA,UAAIqB,OAAO,GAAID,cAAc,GAAC,GAAhB,GAAsBA,cAAc,GAAC,CAAnD;AACA,UAAIE,QAAQ,GAAG;AAACC,QAAAA,KAAK,EAAEF;AAAR,OAAf,CAHO,CAIP;;AACA,aACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAEC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,CADF,CALO,CAgBP;AAEA;AAEA;AACD;;;;EA1EiB/B,S;;AAAdE,K,CAEG+B,Y,GAAe;AACpBxB,EAAAA,UAAU,EAAE;AADQ,C;AA4ExB,eAAeP,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    lightBoard: 5\n  }\n\n  constructor(props) { super(props);\n\n    this.state = {  \n      board: Array.from({length: props.lightBoard  * props.lightBoard})\n    }\n\n    this.generateBoard = this.generateBoard.bind(this);\n\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  generateBoard(){\n    let copy = [];\n    this.state.board.map(n => {\n      let val = Math.floor(Math.random() * 2);\n      val === 0 ? copy.push(true) : copy.push(false)\n    })\n    this.setState({\n      board: copy\n    })\n  }\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let lightBoardSize = this.props.lightBoard;\n    let tr_size = (lightBoardSize*100)+(lightBoardSize*2);\n    let tr_style = {width: tr_size} \n    // if the game is won, just show a winning msg & render nothing else\n    return(\n      <table className=\"Board\">\n        <tbody>\n          <tr style={tr_style}>\n            {\n            // console.log(this.state.board)\n            /* {this.state.board.map(n =>  <Cell isLit={n} />)} */}\n          </tr>\n        </tbody>\n      </table>\n    )\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}