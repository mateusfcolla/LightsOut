{"ast":null,"code":"import _slicedToArray from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: _this.generateBoard(),\n      hasWon: false\n    };\n    _this.printCell = _this.printCell.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.refresh = _this.refresh.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"refresh\",\n    value: function refresh() {\n      window.location.reload();\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"generateBoard\",\n    value: function generateBoard() {\n      var copy = [];\n\n      for (var i = 0; i < this.props.ncols; i++) {\n        var inner = [];\n\n        for (var n = 0; n < this.props.nrows; n++) {\n          inner.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        copy.push(inner);\n      }\n\n      return copy;\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      function flipCells() {\n        flipCell(y, x);\n        flipCell(y, x - 1);\n        flipCell(y - 1, x);\n        flipCell(y, x + 1);\n        flipCell(y + 1, x);\n      }\n\n      flipCells();\n      var hasWon = board.every(function (row) {\n        return row.every(function (cell) {\n          return !cell;\n        });\n      });\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n  }, {\n    key: \"printCell\",\n    value: function printCell(cell) {\n      return React.createElement(Cell, {\n        isLit: cell,\n        flipCellsAroundMe: this.flipCellsAround,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.hasWon) {\n        return React.createElement(\"section\", {\n          className: \"BoardWon\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          },\n          __self: this\n        }, \"Congratulations!\"), React.createElement(\"button\", {\n          onClick: this.refresh,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          },\n          __self: this\n        }, \" Play Again! \"));\n      }\n\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        var _loop = function _loop(x) {\n          var coord = \"\".concat(y, \"-\").concat(x);\n          row.push(React.createElement(Cell, {\n            isLit: _this2.state.board[y][x],\n            key: coord,\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this2.flipCellsAround(coord);\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115\n            },\n            __self: this\n          }));\n        };\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          _loop(x);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 117\n          },\n          __self: this\n        }, row));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Lights\", React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Out\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, tblBoard));\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 1\n};\nexport default Board;","map":{"version":3,"sources":["E:/Mateus - PROJECTS AND IDEAS/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","generateBoard","hasWon","printCell","bind","refresh","window","location","reload","copy","i","ncols","inner","n","nrows","push","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","flipCells","every","row","cell","setState","flipCellsAround","tblBoard","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: 1\n  }\n\n  constructor(props) { super(props);\n\n    this.state = {  \n      board: this.generateBoard(),\n      hasWon: false\n    }\n    this.printCell = this.printCell.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n\n  refresh(){\n    window.location.reload();\n  }\n  /** handle changing a cell: update board & determine if winner */\n  generateBoard(){\n    let copy = [];\n    for(let i = 0; i<(this.props.ncols); i++){\n      let inner = []\n      for(let n = 0; n<(this.props.nrows); n++){\n        inner.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      copy.push(inner)\n    }\n    return copy\n  }\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n}\n\n    function flipCells(){\n      flipCell(y, x)\n      flipCell(y, x-1)\n      flipCell(y-1, x)\n      flipCell(y, x+1)\n      flipCell(y+1, x)\n    }\n\n    flipCells()  \n\n    let hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n  printCell(cell){\n    return <Cell isLit={cell} flipCellsAroundMe={this.flipCellsAround} />\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    if(this.state.hasWon){\n      return (\n      <section className=\"BoardWon\">\n        <h1>Congratulations!</h1>\n        <button onClick={this.refresh} > Play Again! </button>\n      </section>\n      )\n    }\n    let tblBoard = [];\n    for(let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        let coord = `${y}-${x}`\n        row.push(<Cell isLit={this.state.board[y][x]} key={coord} flipCellsAroundMe={() => this.flipCellsAround(coord)} />)\n      }\n      tblBoard.push(<tr>{row}</tr>);\n    }\n    return(\n      \n      <table className=\"Board\">\n        <thead>\n          <h1>Lights<span>Out</span></h1>\n        </thead>\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}