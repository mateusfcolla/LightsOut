{"ast":null,"code":"import _slicedToArray from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"E:\\\\Mateus - PROJECTS AND IDEAS\\\\react-bootcamp-materials\\\\12-lights-out-game\\\\react-lights-out-starter\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      board: _this.generateBoard(),\n      hasWon: false\n    };\n    _this.printCell = _this.printCell.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  _createClass(Board, [{\n    key: \"generateBoard\",\n    value: function generateBoard() {\n      var copy = [];\n\n      for (var i = 0; i < this.props.ncols; i++) {\n        var inner = [];\n\n        for (var n = 0; n < this.props.nrows; n++) {\n          inner.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        copy.push(inner);\n      }\n\n      return copy;\n    }\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n\n\n      flipCell(y, x); // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n    }\n  }, {\n    key: \"printCell\",\n    value: function printCell(cell) {\n      return React.createElement(Cell, {\n        isLit: cell,\n        flipCellsAroundMe: this.flipCellsAround,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var lightBoardSize = this.props.nrows;\n      var tr_size = lightBoardSize * 100 + lightBoardSize * 2;\n      var tr_style = {\n        width: tr_size\n      }; // if the game is won, just show a winning msg & render nothing else\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        style: tr_style,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, this.state.board.map(function (row) {\n        return row.map(function (cell) {\n          return React.createElement(Cell, {\n            isLit: cell,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          });\n        });\n      })))); // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 5,\n  nrows: 5,\n  chanceLightStartsOn: 0.1\n};\nexport default Board;","map":{"version":3,"sources":["E:/Mateus - PROJECTS AND IDEAS/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","board","generateBoard","hasWon","printCell","bind","copy","i","ncols","inner","n","nrows","push","Math","random","chanceLightStartsOn","coord","split","map","Number","y","x","flipCell","cell","flipCellsAround","lightBoardSize","tr_size","tr_style","width","row","defaultProps"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAQJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAAE,+EAAMA,KAAN;AAEnB,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,MAAKC,aAAL,EADI;AAEXC,MAAAA,MAAM,EAAE;AAFG,KAAb;AAIA,UAAKC,SAAL,GAAiB,MAAKA,SAAL,CAAeC,IAAf,uDAAjB;AANiB;AAOlB;AAED;;;;;oCACe;AACb,UAAIC,IAAI,GAAG,EAAX;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE,KAAKR,KAAL,CAAWS,KAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACvC,YAAIE,KAAK,GAAG,EAAZ;;AACA,aAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAE,KAAKX,KAAL,CAAWY,KAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACvCD,UAAAA,KAAK,CAACG,IAAN,CAAWC,IAAI,CAACC,MAAL,KAAgB,KAAKf,KAAL,CAAWgB,mBAAtC;AACD;;AACDT,QAAAA,IAAI,CAACM,IAAL,CAAUH,KAAV;AACD;;AACD,aAAOH,IAAP;AACD;;;oCAEeU,K,EAAO;AAAA,wBACA,KAAKjB,KADL;AAAA,UAChBS,KADgB,eAChBA,KADgB;AAAA,UACTG,KADS,eACTA,KADS;AAErB,UAAIV,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;;AAFqB,6BAGRe,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAKrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGb,KAAd,IAAuBY,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGT,KAAzC,EAAgD;AAC9CV,UAAAA,KAAK,CAACmB,CAAD,CAAL,CAASC,CAAT,IAAc,CAACpB,KAAK,CAACmB,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAXoB,CAarB;;;AACAC,MAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAJ,CAAR,CAdqB,CAerB;AACA;AAEA;AACD;;;8BAESE,I,EAAK;AACb,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEA,IAAb;AAAmB,QAAA,iBAAiB,EAAE,KAAKC,eAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AAGD;;;;6BAES;AACP,UAAIC,cAAc,GAAG,KAAK1B,KAAL,CAAWY,KAAhC;AACA,UAAIe,OAAO,GAAID,cAAc,GAAC,GAAhB,GAAsBA,cAAc,GAAC,CAAnD;AACA,UAAIE,QAAQ,GAAG;AAACC,QAAAA,KAAK,EAAEF;AAAR,OAAf,CAHO,CAIP;;AACA,aACE;AAAO,QAAA,SAAS,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAI,QAAA,KAAK,EAAEC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,KAAK3B,KAAL,CAAWC,KAAX,CAAiBiB,GAAjB,CAAqB,UAAAW,GAAG;AAAA,eAAIA,GAAG,CAACX,GAAJ,CAAQ,UAAAK,IAAI;AAAA,iBAAI,oBAAC,IAAD;AAAM,YAAA,KAAK,EAAEA,IAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAJ;AAAA,SAAZ,CAAJ;AAAA,OAAxB,CADF,CADF,CADF,CADF,CALO,CAcP;AAEA;AAEA;AACD;;;;EA7EiB3B,S;;AAAdE,K,CAEGgC,Y,GAAe;AACpBtB,EAAAA,KAAK,EAAE,CADa;AAEpBG,EAAAA,KAAK,EAAE,CAFa;AAGpBI,EAAAA,mBAAmB,EAAE;AAHD,C;AA+ExB,eAAejB,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    ncols: 5,\n    nrows: 5,\n    chanceLightStartsOn: 0.1\n  }\n\n  constructor(props) { super(props);\n\n    this.state = {  \n      board: this.generateBoard(),\n      hasWon: false\n    }\n    this.printCell = this.printCell.bind(this)\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  generateBoard(){\n    let copy = [];\n    for(let i = 0; i<(this.props.ncols); i++){\n      let inner = []\n      for(let n = 0; n<(this.props.nrows); n++){\n        inner.push(Math.random() < this.props.chanceLightStartsOn)\n      }\n      copy.push(inner)\n    }\n    return copy\n  }\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x)\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n  printCell(cell){\n    return <Cell isLit={cell} flipCellsAroundMe={this.flipCellsAround} />\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let lightBoardSize = this.props.nrows;\n    let tr_size = (lightBoardSize*100)+(lightBoardSize*2);\n    let tr_style = {width: tr_size} \n    // if the game is won, just show a winning msg & render nothing else\n    return(\n      <table className=\"Board\">\n        <tbody>\n          <tr style={tr_style}>\n           {this.state.board.map(row => row.map(cell => <Cell isLit={cell} />) )}\n          </tr>\n        </tbody>\n      </table>\n    )\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}